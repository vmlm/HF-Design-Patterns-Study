1. Identify th aspects of your application that vary and separate them from what stays the same.
	Encapsulate what varies so it won't affect the rest of your code. Result: Fewer unintended changes and more flexibility in your system.

2. Program to an interface, not an implementation. 

3. Favor composition over inheritance. Creating systems using composition gives you a lot more flexibility. Not only does it let you encapsulate a family of algorithms into their own set of classes, but it also lets you change behavior at runtime as long as the object you're composing with implements the correct behavior interface. 

4. Strive for loosely coupled designs between objects that interact.

5. Classes should be open for extension, but closed for modification.

6. Dependency inversion principle: Depend upon abstractions. Do not depend upon concrete classes.

	The following guidelines can help you avoid OO designs that violate th Dependency Inversion Principle:
		-> No variable should hold a reference to a concrete class. {If you use new, you'll be holding a reference to a concrete claass. Use a factory to get around that.}

		-> No class should derive from a concrete class. {If you derive from a concrete class, you're depending on a concrete class. Derive from an abstraction, like an interface or an abstract class.}

		-> No method should override an implemented method of any of its base classes. {If you override an implemented method, then your base class wasn't really an abstraction to start with. Those methods implemented in th base class are meant to be shared by all your subclasses.}

		These are guidelines you should strive for, rather than rules you should follow all the time. Clearly, every single Java program ever written violates these guidelines!

		But, if you internalize tehse guidelines and have them in the back of your mind when you design, you'll know when you are violating the principle and you'll have a good reason for doing so. For instance, if you have a class that isn't likely to change, and you know it, then it's not the end of the world if you instantiate a concrete calss in your code. Think about it; we instantiate String objects all the time without thinking twice. Does that violate the principle? Yes. Is that okay? Yes. Why? Because String is very unlikely to change.

